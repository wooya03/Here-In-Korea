Index: src/main/java/kr/kro/hereinkorea/HereinkoreaApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.kro.hereinkorea;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.data.jpa.repository.config.EnableJpaAuditing;\r\n\r\n@SpringBootApplication\r\n@EnableJpaAuditing\r\npublic class HereinkoreaApplication {\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\tSpringApplication.run(HereinkoreaApplication.class, args);\r\n\r\n\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/HereinkoreaApplication.java b/src/main/java/kr/kro/hereinkorea/HereinkoreaApplication.java
--- a/src/main/java/kr/kro/hereinkorea/HereinkoreaApplication.java	
+++ b/src/main/java/kr/kro/hereinkorea/HereinkoreaApplication.java	
@@ -2,7 +2,9 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
 import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
+import org.springframework.web.client.RestTemplate;
 
 @SpringBootApplication
 @EnableJpaAuditing
@@ -12,5 +14,10 @@
 		SpringApplication.run(HereinkoreaApplication.class, args);
 
 
+	}
+
+	@Bean
+	public RestTemplate restTemplate() {
+		return new RestTemplate();
 	}
 }
Index: src/main/frontend/src/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Routes, Route } from 'react-router-dom';\r\nimport AdminLogin from './admin/js/AdminLogin.js';\r\nimport AdminMain from './admin/js/AdminMain.js';\r\nimport UserManagement from './admin/js/UserManagement.js';\r\nimport './App.css';\r\nimport Main from './main/Main.js';\r\nimport LoginMain from \"./user/js/LoginMain\";\r\nimport AdminHeader from './admin/js/AdminHeader.js';\r\nimport Header from './global/header/Header.js';\r\nimport CourseMenagement from './admin/js/CourseManagement.js';\r\nimport ReviewManagement from './admin/js/ReviewManagement.js';\r\nimport CommentManagement from './admin/js/CommentManagement.js';\r\nimport QnaManagement from './admin/js/QnaManagement.js';\r\nimport AdminLogout from './admin/js/AdminLogout.js';\r\nimport Register from './user/js/Register.js';\r\nimport SearchPage from \"./global/search/search_page\";\r\nimport GoogleTranslate from './global/translate/Translate_api.js';\r\nimport QuestionList from './qna/js/QuestionList.js';\r\nimport QuestionAdd from './qna/js/QuestionAdd.js';\r\nimport QuestionDetails from './qna/js/QuestionDetails.js';\r\nimport Review from './review/js/Review.js';\r\nimport ReviewWrite from './review/js/ReviewWrite.js'\r\nimport Course from './course/js/Course.js';\r\nimport CourseWrite from \"./course/js/CourseWrite.js\";\r\nimport CourseManagement from \"./admin/js/CourseManagement.js\";\r\nimport RegisterAuth from \"./user/js/RegisterAuth\";\r\nimport IdFind from \"./user/js/IdFind\";\r\nimport PwFind from \"./user/js/PwFind\";\r\nimport Profile from \"./user/js/Profile\";\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <main>\r\n      <Routes>\r\n        {/* 메인 페이지 */}\r\n        <Route path=\"/\" element={<><Header /><Main /></>} />\r\n        \r\n        {/* 검색 API */}\r\n        <Route path=\"/translate\" element={<GoogleTranslate />} />\r\n\r\n        {/* 검색 페이지 */}\r\n        <Route path=\"/search_page\" element={<><Header /><SearchPage /></>} />\r\n\r\n        {/* 어드민 페이지 */}\r\n        <Route path=\"/admin\" element={<><AdminHeader /><AdminMain /></>} />\r\n        <Route path=\"/admin/login\" element={<><AdminHeader /><AdminLogin /></>} />\r\n        <Route path=\"/admin/logout\" element={<><AdminHeader /><AdminLogout /></>} />\r\n        <Route path=\"/admin/user\" element={<><AdminHeader /><UserManagement /></>} />\r\n        <Route path=\"/admin/course\" element={<><AdminHeader /><CourseManagement /></>} />\r\n        <Route path=\"/admin/review\" element={<><AdminHeader /><ReviewManagement /></>} />\r\n        <Route path=\"/admin/comment\" element={<><AdminHeader /><CommentManagement /></>} />\r\n        <Route path=\"/admin/qna\" element={<><AdminHeader /><QnaManagement /></>} />\r\n\r\n        {/* 로그인 페이지 */}\r\n        <Route path=\"/login\" element={<><Header /><LoginMain /></>} />\r\n\r\n        {/* 회원가입 페이지 */}\r\n        <Route path=\"/register\" element={<><Header /><Register /></>} />\r\n        <Route path=\"/registerauth\" element={<><Header /><RegisterAuth /></>} />\r\n\r\n        {/* 아이디/비밀번호 찾기 페이지*/}\r\n        <Route path=\"/find/id\" element={<><Header /><IdFind /></>} />\r\n        {/* 비밀번호 찾기 경로 수정 예정*/}\r\n        <Route path=\"/find/pw\" element={<><Header /><PwFind /></>} />\r\n\r\n        {/* 프로필 */}\r\n        <Route path=\"/profile\" element={<><Header /><Profile /></>} />\r\n\r\n\r\n        {/* 질문 페이지 */}\r\n        <Route path=\"/question/list\" element={<><Header /><QuestionList /></>} />\r\n        <Route path=\"/question/write\" element={<><Header /><QuestionAdd /></>} />\r\n        <Route path=\"/question/:id\" element={<><Header /><QuestionDetails /></>} />\r\n\r\n        {/* 리뷰 페이지 */}\r\n        <Route path=\"/review\" element={<><Review /></>} />\r\n        <Route path=\"/review/write\" element={<><ReviewWrite /></>} />\r\n\r\n        {/* 코스 페이지 */}\r\n        <Route path=\"/course\" element={<><Course /></>} />\r\n        <Route path=\"/course/write\" element={<><CourseWrite /></>} />\r\n\r\n\r\n      </Routes>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/frontend/src/App.js b/src/main/frontend/src/App.js
--- a/src/main/frontend/src/App.js	
+++ b/src/main/frontend/src/App.js	
@@ -18,6 +18,7 @@
 import QuestionList from './qna/js/QuestionList.js';
 import QuestionAdd from './qna/js/QuestionAdd.js';
 import QuestionDetails from './qna/js/QuestionDetails.js';
+import AnswerAdd from './qna/js/AnswerAdd.js';
 import Review from './review/js/Review.js';
 import ReviewWrite from './review/js/ReviewWrite.js'
 import Course from './course/js/Course.js';
@@ -73,6 +74,8 @@
         <Route path="/question/list" element={<><Header /><QuestionList /></>} />
         <Route path="/question/write" element={<><Header /><QuestionAdd /></>} />
         <Route path="/question/:id" element={<><Header /><QuestionDetails /></>} />
+        {/* 답변 페이지 */}
+        <Route path="/question/:id/answer/write" element={<><Header /><AnswerAdd /></>} />
 
         {/* 리뷰 페이지 */}
         <Route path="/review" element={<><Review /></>} />
Index: src/main/frontend/src/admin/js/QnaManagement.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from \"react\";\r\nimport \"../css/QnaManagement.css\";\r\nimport \"../css/Common.css\";\r\nimport { format } from 'date-fns';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction formatTime(dateString) {\r\n  const date = new Date(dateString);\r\n  return format(date, 'yyyy-MM-dd h:mm:ss a');\r\n}\r\n\r\nfunction QnaManagement() {\r\n  const baseUrl = \"http://localhost:8080\";\r\n  const [data, setData] = useState([]);  // 빈 배열로 초기화\r\n\r\n  useEffect(() => {\r\n    putSpringData();\r\n  }, []);\r\n\r\n  async function putSpringData() {\r\n    await axios.get(baseUrl + \"/question/list\")\r\n      .then((res) => {\r\n        // dtoList에서 데이터를 가져오도록 수정\r\n        const transformedData = res.data.dtoList ? res.data.dtoList.map(item => {\r\n          return {\r\n            id: item.id,  // 질문 ID\r\n            title: item.title,  // 질문 제목\r\n            category: item.category,  // 문의 구분\r\n            createdDate: item.createdDate,  // 생성일\r\n            answered: item.qstatus,  // 질문의 답변 여부\r\n            memId : item.memId\r\n          };\r\n        }) : [];\r\n        setData(transformedData);  // 변환된 데이터를 상태로 설정\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  const [selectedIds, setSelectedIds] = useState([]);\r\n\r\n  function handleCheckboxChange(event, id) {\r\n    if (event.target.checked) {\r\n      setSelectedIds([...selectedIds, id]);\r\n    } else {\r\n      setSelectedIds(selectedIds.filter((selectedId) => selectedId !== id));\r\n    }\r\n  }\r\n\r\n  async function handleDelete() {\r\n    if (selectedIds.length === 0) {\r\n      alert(\"삭제할 게시글을 선택해주세요.\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const response = await axios.delete(baseUrl + `/question/delete/${selectedIds}`);\r\n      if (response.status === 200) {\r\n        alert(\"삭제가 완료되었습니다.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"삭제 중 오류 발생:\", error);\r\n      alert(\"삭제 중 오류가 발생했습니다.\");\r\n    }\r\n  }\r\n\r\n  return (\r\n      <div className=\"app-container\">\r\n        <h1>QNA</h1>\r\n        <div className=\"search-qna\">\r\n          <input type=\"text\"placeholder=\"문의 제목\" />\r\n          <input type=\"text\" placeholder=\"아이디 검색\" />\r\n          <select>\r\n            <option value=\"\">문의구분</option>\r\n            <option value=\"숙소문의\">숙소문의</option>\r\n            <option value=\"행사문의\">행사문의</option>\r\n            <option value=\"코스문의\">코스문의</option>\r\n            <option value=\"기타문의\">기타문의</option>\r\n          </select>\r\n          <p>답변대기</p><input type=\"checkbox\" value=\"answer\"/>\r\n          <input type=\"date\" />~<input type=\"date\" />\r\n          <button>조회</button>\r\n        </div>\r\n\r\n        <button className=\"delete-button\" onClick={handleDelete}>DELETE</button>\r\n\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>제목</th>\r\n              <th>아이디</th>\r\n              <th>문의구분</th>\r\n              <th>작성일</th>\r\n              <th>답변상태</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {data && data.length > 0 ? data.map((datas) => (\r\n              <tr key={datas.qId}>\r\n                <td><input type=\"checkbox\" onChange={(e) => handleCheckboxChange(e, datas.id)} /></td>\r\n                <td>{datas.title}</td>\r\n                <td>{datas.memId}</td>\r\n                <td>{datas.category}</td>\r\n                <td>{formatTime(datas.createdDate)}</td>\r\n                {datas.answered ? (\r\n                <td>✔ 답변완료</td>\r\n              ) : (\r\n                <td>✖ 답변대기중</td>\r\n              )}\r\n              </tr>\r\n            )) : <tr><td>No data available.</td></tr>}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default QnaManagement;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/frontend/src/admin/js/QnaManagement.js b/src/main/frontend/src/admin/js/QnaManagement.js
--- a/src/main/frontend/src/admin/js/QnaManagement.js	
+++ b/src/main/frontend/src/admin/js/QnaManagement.js	
@@ -3,6 +3,7 @@
 import "../css/Common.css";
 import { format } from 'date-fns';
 import axios from 'axios';
+import { useNavigate } from "react-router-dom";
 
 
 function formatTime(dateString) {
@@ -49,6 +50,13 @@
     }
   }
 
+  const navigate = useNavigate();
+
+  const handleClick = (id) => {
+    navigate(`/question/${id}/answer/write`); // 버튼 클릭 시 해당 경로로 이동
+  };
+  
+
   async function handleDelete() {
     if (selectedIds.length === 0) {
       alert("삭제할 게시글을 선택해주세요.");
@@ -99,7 +107,7 @@
           </thead>
           <tbody>
           {data && data.length > 0 ? data.map((datas) => (
-              <tr key={datas.qId}>
+              <tr key={datas.id}>
                 <td><input type="checkbox" onChange={(e) => handleCheckboxChange(e, datas.id)} /></td>
                 <td>{datas.title}</td>
                 <td>{datas.memId}</td>
@@ -108,7 +116,7 @@
                 {datas.answered ? (
                 <td>✔ 답변완료</td>
               ) : (
-                <td>✖ 답변대기중</td>
+                <td><button onClick={() => handleClick(datas.id)}>답변 등록</button></td>
               )}
               </tr>
             )) : <tr><td>No data available.</td></tr>}
Index: src/main/java/kr/kro/hereinkorea/domain/qna/answer/controller/AnswerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/qna/answer/controller/AnswerController.java b/src/main/java/kr/kro/hereinkorea/domain/qna/answer/controller/AnswerController.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/qna/answer/controller/AnswerController.java	
@@ -0,0 +1,27 @@
+package kr.kro.hereinkorea.domain.qna.answer.controller;
+
+import kr.kro.hereinkorea.domain.qna.answer.dto.AnswerDTO;
+import kr.kro.hereinkorea.domain.qna.answer.service.AnswerService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("/answer")
+@RequiredArgsConstructor
+public class AnswerController {
+
+//    private final AnswerService answerService;
+//
+//    @PostMapping("/write")
+//    @ResponseStatus(HttpStatus.CREATED)
+//    public String addAnswer(@RequestBody AnswerDTO answerDTO) {
+//        try {
+//            answerService.write(answerDTO);
+//            return "답변이 등록되었습니다.";
+//        } catch (Exception e) {
+//            e.printStackTrace();  // 로그에 에러 출력
+//            return "문제 발생: " + e.getMessage();
+//        }
+//    }
+}
\ No newline at end of file
Index: src/main/java/kr/kro/hereinkorea/domain/qna/answer/service/AnswerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/qna/answer/service/AnswerService.java b/src/main/java/kr/kro/hereinkorea/domain/qna/answer/service/AnswerService.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/qna/answer/service/AnswerService.java	
@@ -0,0 +1,35 @@
+package kr.kro.hereinkorea.domain.qna.answer.service;
+
+import kr.kro.hereinkorea.domain.member.Entity.MemberEntity;
+import kr.kro.hereinkorea.domain.qna.answer.dto.AnswerDTO;
+import kr.kro.hereinkorea.domain.qna.answer.entity.AnswerEntity;
+import kr.kro.hereinkorea.domain.qna.question.entity.QuestionEntity;
+
+public interface AnswerService {
+//
+//    void write(AnswerDTO dto);
+//
+////    AnswerDTO get(Long id);
+//    default AnswerDTO entityToDTO(AnswerEntity entity, MemberEntity user, QuestionEntity question){
+//        return AnswerDTO.builder()
+//                .id(entity.getId())
+//                .contents(entity.getContents())
+//                .memId(user.getMemId())
+//                .questionId(question.getId())
+//                .createdDate(entity.getCreatedDate())
+//                .modifiedDate(entity.getModifiedDate())
+//                .build();
+//    }
+//
+//    default AnswerEntity dtoToEntity(AnswerDTO dto){
+//        QuestionEntity questionEntity = QuestionEntity.builder().id(dto.getQuestionId()).build();
+//        MemberEntity memberEntity = MemberEntity.builder().memId(dto.getMemId()).build();
+//
+//        return AnswerEntity.builder()
+//                .id(dto.getId())
+//                .contents(dto.getContents())
+//                .member(memberEntity)
+//                .question(questionEntity)
+//                .build();
+//    }
+}
Index: src/main/frontend/src/qna/js/AnswerAdd.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/frontend/src/qna/js/AnswerAdd.js b/src/main/frontend/src/qna/js/AnswerAdd.js
new file mode 100644
--- /dev/null	
+++ b/src/main/frontend/src/qna/js/AnswerAdd.js	
@@ -0,0 +1,65 @@
+import React, { useEffect, useState } from 'react';import axios from 'axios';
+import { useNavigate } from 'react-router-dom';
+import { useParams } from 'react-router-dom';
+import '../css/AnswerAdd.css';
+
+const AnswerAdd = () => {
+    const {id} = useParams();
+
+    const [data, setData] = useState({
+      contents: '',
+      memId: 'admin001',
+      questionId: id,
+      createdDate: new Date().toISOString(),
+      modifiedDate: new Date().toISOString()
+    });
+
+    useEffect(() => {
+      setData((prev) => ({ ...prev, questionId: id }));
+    }, [id]);
+    
+    const handleContentChange = (event) => {
+      console.log('Content:', event.target.value);
+      setData((prev) => ({ ...prev, contents: event.target.value }));
+    };
+  
+    const navigate = useNavigate();
+
+    const handleSubmit = async () => {
+      if (data.contents.trim() === '') {
+        alert('내용을 입력해주세요');
+        return;
+      }
+  
+      try {
+        console.log(data);
+        // Spring Boot로 데이터 전송
+        const response = await axios.post('http://localhost:8080/answer/write', data);
+        if (response.status === 201) {
+          alert('답변이 등록되었습니다!');
+          console.log('전송 데이터:', data);
+          navigate('/admin/qna');
+        }
+      } catch (error) {
+        console.error('답변 등록 중 오류 발생:', error);
+        alert('답변 등록에 실패했습니다.');
+      }
+    };
+  
+    return (
+      <div className="answer-add-container">
+        <div className="answer-add-header">
+          <button className="submit-button" onClick={handleSubmit}>등록</button>
+        </div>
+        <textarea
+          className="answer-content"
+          value={data.contents}
+          onChange={handleContentChange}
+          placeholder="답변 내용을 입력하세요"
+        />
+      </div>
+    );
+  };
+  
+  export default AnswerAdd;
+  
\ No newline at end of file
Index: src/main/frontend/src/qna/js/AnswerDetails.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/frontend/src/qna/js/AnswerDetails.js b/src/main/frontend/src/qna/js/AnswerDetails.js
new file mode 100644
--- /dev/null	
+++ b/src/main/frontend/src/qna/js/AnswerDetails.js	
@@ -0,0 +1,32 @@
+import React, { useEffect, useState } from 'react';
+import axios from 'axios';
+import { useParams } from 'react-router-dom';
+
+
+function AnswerDetails() {
+    // const baseUrl = "http://localhost:8080";
+    // const [data, setData] = useState();
+    // const {id} = useParams();
+  
+    // useEffect(() => {
+    //     axios.get(baseUrl + `/answer/${id}`)
+    //     .then((res) => {
+    //         setData(res.data);
+    //     })
+    //     .catch((error) => {
+    //         console.error(error);
+    //     });
+    // }, [id]);
+
+    // if (!data) return <p>No data available.</p>;
+
+    // return (
+    //     <div className="answer-container">
+    //         <div className="answer-text">
+    //             {data.contents}
+    //         </div>
+    //     </div>
+    // )
+}
+
+export default AnswerDetails;
\ No newline at end of file
Index: src/main/java/kr/kro/hereinkorea/domain/qna/answer/service/AnswerServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/qna/answer/service/AnswerServiceImpl.java b/src/main/java/kr/kro/hereinkorea/domain/qna/answer/service/AnswerServiceImpl.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/qna/answer/service/AnswerServiceImpl.java	
@@ -0,0 +1,59 @@
+package kr.kro.hereinkorea.domain.qna.answer.service;
+
+import kr.kro.hereinkorea.domain.member.Entity.MemberEntity;
+import kr.kro.hereinkorea.domain.member.repository.MemberRepository;
+import kr.kro.hereinkorea.domain.qna.answer.dto.AnswerDTO;
+import kr.kro.hereinkorea.domain.qna.answer.entity.AnswerEntity;
+import kr.kro.hereinkorea.domain.qna.answer.repository.AnswerRepository;
+import kr.kro.hereinkorea.domain.qna.question.entity.QuestionEntity;
+import kr.kro.hereinkorea.domain.qna.question.repository.QuestionRepository;
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+import org.springframework.web.bind.annotation.RequestBody;
+
+@Service
+@RequiredArgsConstructor
+@Transactional(rollbackFor = Exception.class)
+public class AnswerServiceImpl implements AnswerService {
+
+//    private final AnswerRepository answerRepository;
+//    private final QuestionRepository questionRepository;
+//    private  final MemberRepository memberRepository;
+//
+//    @Override
+//    public void write(@RequestBody AnswerDTO dto) {
+//        // 1. 답변 내용 및 질문 ID 유효성 검사
+//        if (dto.getContents() == null || dto.getContents().trim().isEmpty()) {
+//            throw new IllegalArgumentException("답변 내용을 입력해주세요.");
+//        }
+//        if (dto.getQuestionId() == null) {
+//            throw new IllegalArgumentException("질문 ID가 필요합니다.");
+//        }
+//
+//        // 2. QuestionEntity 조회
+//        QuestionEntity questionEntity = questionRepository.findById(dto.getQuestionId())
+//                .orElseThrow(() -> new IllegalArgumentException("해당 ID에 해당하는 질문이 존재하지 않습니다."));
+//
+//        // 3. QuestionEntity 상태 변경
+//        questionEntity.okStatus();
+//
+//        // 4. MemberEntity 검증 및 저장
+//        if (questionEntity.getMember() == null || questionEntity.getMember().getMemId() == null) {
+//            MemberEntity memberEntity = memberRepository.save(questionEntity.getMember());
+//            questionEntity.setMember(memberEntity);
+//        }
+//
+//        // 5. AnswerEntity 생성 및 질문 연관 설정
+//        AnswerEntity answerEntity = dtoToEntity(dto);
+//        answerEntity.changeQuestion(questionEntity);
+//
+//        // 6. 변경된 QuestionEntity 저장
+//        questionRepository.save(questionEntity);
+//
+//        // 7. AnswerEntity 저장
+//        answerRepository.save(answerEntity);
+}
+
+
Index: src/main/java/kr/kro/hereinkorea/domain/qna/answer/repository/AnswerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/qna/answer/repository/AnswerRepository.java b/src/main/java/kr/kro/hereinkorea/domain/qna/answer/repository/AnswerRepository.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/qna/answer/repository/AnswerRepository.java	
@@ -0,0 +1,12 @@
+package kr.kro.hereinkorea.domain.qna.answer.repository;
+
+import kr.kro.hereinkorea.domain.qna.answer.entity.AnswerEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.Optional;
+
+public interface AnswerRepository extends JpaRepository<AnswerEntity, Long> {
+
+    Optional<AnswerEntity> findByQuestionId(long id);
+
+}
Index: src/main/java/kr/kro/hereinkorea/global/api/OpenApiController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/global/api/OpenApiController.java b/src/main/java/kr/kro/hereinkorea/global/api/OpenApiController.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/global/api/OpenApiController.java	
@@ -0,0 +1,45 @@
+package kr.kro.hereinkorea.global.api;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.io.*;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+@RestController
+@RequestMapping("/apii")
+@Slf4j
+public class OpenApiController {
+
+    @GetMapping("/open-api")
+    public String callApi() throws IOException {
+        StringBuilder result = new StringBuilder();
+
+        String urlStr = "https://apis.data.go.kr/B551011/KorService1/areaBasedList1"
+                + "?serviceKey=Had%2BznoLVPTQg7iygM9Hb%2Ba64OjDqjcztb2seubysp1ivP0dbmpaLeOYyaYhEmdCBu0skkp%2FiZEdP%2BqL%2BrAyew%3D%3D"
+                + "&MobileOS=ETC&MobileApp=Test&_type=json"
+                + "&pageNo=0&numOfRows=20&contentTypeId=32";
+
+        URL url = new URL(urlStr);
+
+        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
+        urlConnection.setRequestMethod("GET");
+
+        BufferedReader br;
+
+        br = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(), "UTF-8"));
+
+        String returnLine;
+
+        while((returnLine = br.readLine()) != null){
+            result.append(returnLine+"\n\r");
+        }
+
+        urlConnection.disconnect();
+
+        return  result.toString();
+    }
+}
Index: src/main/frontend/src/qna/css/AnswerAdd.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/frontend/src/qna/css/AnswerAdd.css b/src/main/frontend/src/qna/css/AnswerAdd.css
new file mode 100644
--- /dev/null	
+++ b/src/main/frontend/src/qna/css/AnswerAdd.css	
@@ -0,0 +1,35 @@
+.answer-add-container {
+    width: 60%;
+    margin: 20px auto;
+    border: 1px solid #ddd;
+    border-radius: 4px;
+    padding: 16px;
+    background-color: #f9f9f9;
+  }
+
+  .answer-header {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    margin-bottom: 10px;
+  }
+
+  .submit-button {
+    padding: 8px 16px;
+    font-size: 16px;
+    background-color: #007bff;
+    color: white;
+    border: none;
+    width: 10%;
+    border-radius: 4px;
+    cursor: pointer;
+  }
+  
+  .answer-content {
+    width: 100%;
+    height: 200px;
+    font-size: 16px;
+    border: 1px solid #ccc;
+    border-radius: 4px;
+    resize: none;
+  }
\ No newline at end of file
Index: src/main/frontend/src/qna/css/AnswerDetails.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/frontend/src/qna/css/AnswerDetails.css b/src/main/frontend/src/qna/css/AnswerDetails.css
new file mode 100644
--- /dev/null	
+++ b/src/main/frontend/src/qna/css/AnswerDetails.css	
@@ -0,0 +1,13 @@
+/* 기본 스타일 */
+.answer-container {
+    width: 100%;
+    max-width: 1200px;
+    margin: 0 auto;
+    font-family: Arial, sans-serif;
+}
+
+.answer-text {
+    font-size: 1em;
+    color: #333;
+    line-height: 1.5;
+}
\ No newline at end of file
Index: src/main/generated/kr/kro/hereinkorea/domain/hotels/entity/QHotelsEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/generated/kr/kro/hereinkorea/domain/hotels/entity/QHotelsEntity.java b/src/main/generated/kr/kro/hereinkorea/domain/hotels/entity/QHotelsEntity.java
new file mode 100644
--- /dev/null	
+++ b/src/main/generated/kr/kro/hereinkorea/domain/hotels/entity/QHotelsEntity.java	
@@ -0,0 +1,61 @@
+package kr.kro.hereinkorea.domain.hotels.entity;
+
+import static com.querydsl.core.types.PathMetadataFactory.*;
+
+import com.querydsl.core.types.dsl.*;
+
+import com.querydsl.core.types.PathMetadata;
+import javax.annotation.processing.Generated;
+import com.querydsl.core.types.Path;
+
+
+/**
+ * QHotelsEntity is a Querydsl query type for HotelsEntity
+ */
+@Generated("com.querydsl.codegen.DefaultEntitySerializer")
+public class QHotelsEntity extends EntityPathBase<HotelsEntity> {
+
+    private static final long serialVersionUID = -1173797054L;
+
+    public static final QHotelsEntity hotelsEntity = new QHotelsEntity("hotelsEntity");
+
+    public final StringPath address = createString("address");
+
+    public final NumberPath<Integer> area_code = createNumber("area_code", Integer.class);
+
+    public final StringPath checkIn = createString("checkIn");
+
+    public final StringPath checkOut = createString("checkOut");
+
+    public final StringPath detail = createString("detail");
+
+    public final BooleanPath hasParking = createBoolean("hasParking");
+
+    public final StringPath homepage = createString("homepage");
+
+    public final NumberPath<Double> hotelMapx = createNumber("hotelMapx", Double.class);
+
+    public final NumberPath<Double> hotelMapy = createNumber("hotelMapy", Double.class);
+
+    public final StringPath hotelTag = createString("hotelTag");
+
+    public final NumberPath<Long> id = createNumber("id", Long.class);
+
+    public final StringPath name = createString("name");
+
+    public final StringPath tel = createString("tel");
+
+    public QHotelsEntity(String variable) {
+        super(HotelsEntity.class, forVariable(variable));
+    }
+
+    public QHotelsEntity(Path<? extends HotelsEntity> path) {
+        super(path.getType(), path.getMetadata());
+    }
+
+    public QHotelsEntity(PathMetadata metadata) {
+        super(HotelsEntity.class, metadata);
+    }
+
+}
+
Index: src/main/java/kr/kro/hereinkorea/domain/hotels/entity/HotelsEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/hotels/entity/HotelsEntity.java b/src/main/java/kr/kro/hereinkorea/domain/hotels/entity/HotelsEntity.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/hotels/entity/HotelsEntity.java	
@@ -0,0 +1,52 @@
+package kr.kro.hereinkorea.domain.hotels.entity;
+
+import jakarta.persistence.*;
+import lombok.*;
+
+@Entity
+@Table(name = "hotels")
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor(access = AccessLevel.PROTECTED)
+@Getter
+public class HotelsEntity {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(length = 50, nullable = false)
+    private String name;
+
+    @Column(length = 255, nullable = false)
+    private String address;
+
+    @Column(nullable = false)
+    private int area_code;
+
+    @Column(nullable = false)
+    private Double hotelMapx;
+
+    @Column(nullable = false)
+    private Double hotelMapy;
+
+    @Column(length = 13, nullable = false)
+    private String tel;
+
+    @Column(length = 255, nullable = false)
+    private String detail;
+
+    @Column(length = 255, nullable = false)
+    private String homepage;
+
+    @Column(nullable = false)
+    private Boolean hasParking;
+
+    @Column(length = 5, nullable = false)
+    private String checkIn;
+
+    @Column(length = 5, nullable = false)
+    private String checkOut;
+
+    @Column(length = 100)
+    private String hotelTag;
+}
Index: src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsApiService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsApiService.java b/src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsApiService.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsApiService.java	
@@ -0,0 +1,34 @@
+package kr.kro.hereinkorea.domain.hotels.service;
+
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+import org.springframework.web.client.RestTemplate;
+import org.springframework.web.util.UriComponentsBuilder;
+
+@Service
+@Transactional(rollbackFor = Exception.class)
+public class HotelsApiService {
+
+    private String apiKey = "${Had%2BznoLVPTQg7iygM9Hb%2Ba64OjDqjcztb2seubysp1ivP0dbmpaLeOYyaYhEmdCBu0skkp%2FiZEdP%2BqL%2BrAyew%3D%3D}";
+
+    private final RestTemplate restTemplate;
+
+    public HotelsApiService(RestTemplate restTemplate){
+        this.restTemplate = restTemplate;
+    }
+
+    public String fetch() {
+        String url = UriComponentsBuilder.fromHttpUrl("https://apis.data.go.kr/B551011/KorService1/areaBasedList1")
+                .queryParam("serviceKey", apiKey)
+                .queryParam("MobileOS", "ETC")
+                .queryParam("MobileApp", "Test")
+                .queryParam("_type", "json")
+                .queryParam("pageNo", 1)
+                .queryParam("numOfRows", 20)
+                .queryParam("contentTypeId", 32)
+                .build().toString();
+        ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
+        return response.getBody();
+    }
+}
Index: src/main/java/kr/kro/hereinkorea/domain/hotels/dto/HotelsDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/hotels/dto/HotelsDTO.java b/src/main/java/kr/kro/hereinkorea/domain/hotels/dto/HotelsDTO.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/hotels/dto/HotelsDTO.java	
@@ -0,0 +1,23 @@
+package kr.kro.hereinkorea.domain.hotels.dto;
+import lombok.*;
+
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Getter
+@Setter
+public class HotelsDTO {
+    private Long id;
+    private String name;
+    private String address;
+    private int area_code;
+    private Double hotelMapx;
+    private Double hotelMapy;
+    private String tel;
+    private String detail;
+    private String homepage;
+    private Boolean hasParking;
+    private String checkIn;
+    private String checkOut;
+    private String hotelTag;
+}
Index: src/main/java/kr/kro/hereinkorea/domain/hotels/controller/HotelsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/hotels/controller/HotelsController.java b/src/main/java/kr/kro/hereinkorea/domain/hotels/controller/HotelsController.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/hotels/controller/HotelsController.java	
@@ -0,0 +1,22 @@
+package kr.kro.hereinkorea.domain.hotels.controller;
+
+import kr.kro.hereinkorea.domain.hotels.service.HotelsApiService;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/hotel")
+public class HotelsController {
+
+    private final HotelsApiService hotelsApiService;
+
+    public HotelsController(HotelsApiService hotelsApiService){
+        this.hotelsApiService = hotelsApiService;
+    }
+
+    @GetMapping("/api")
+    public String fetch(){
+        return hotelsApiService.fetch();
+    }
+}
Index: src/main/java/kr/kro/hereinkorea/domain/hotels/repository/HotelsRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/hotels/repository/HotelsRepository.java b/src/main/java/kr/kro/hereinkorea/domain/hotels/repository/HotelsRepository.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/hotels/repository/HotelsRepository.java	
@@ -0,0 +1,7 @@
+package kr.kro.hereinkorea.domain.hotels.repository;
+
+import kr.kro.hereinkorea.domain.qna.answer.entity.AnswerEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface HotelsRepository extends JpaRepository<AnswerEntity, Long> {
+}
Index: src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsService.java b/src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsService.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsService.java	
@@ -0,0 +1,4 @@
+package kr.kro.hereinkorea.domain.hotels.service;
+
+public interface HotelsService {
+}
Index: src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsServiceImpl.java b/src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsServiceImpl.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/kr/kro/hereinkorea/domain/hotels/service/HotelsServiceImpl.java	
@@ -0,0 +1,26 @@
+package kr.kro.hereinkorea.domain.hotels.service;
+
+import kr.kro.hereinkorea.domain.hotels.repository.HotelsRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+@Transactional(rollbackFor = Exception.class)
+public class HotelsServiceImpl implements HotelsService {
+
+    private final HotelsApiService hotelsApiService;
+    private final HotelsRepository hotelsRepository;
+
+    @Autowired
+    public HotelsServiceImpl(HotelsApiService hotelsApiService, HotelsRepository hotelsRepository){
+        this.hotelsApiService = hotelsApiService;
+        this.hotelsRepository = hotelsRepository;
+    }
+
+    public void saveHotelsData(){
+        String response = hotelsApiService.fetch();
+
+    }
+
+}
